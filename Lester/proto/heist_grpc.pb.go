// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: heist.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HeistService_SolicitarOferta_FullMethodName = "/heist.HeistService/SolicitarOferta"
	HeistService_AceptarOferta_FullMethodName   = "/heist.HeistService/AceptarOferta"
	HeistService_EstudiarGolpe_FullMethodName   = "/heist.HeistService/EstudiarGolpe"
)

// HeistServiceClient is the client API for HeistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HeistServiceClient interface {
	SolicitarOferta(ctx context.Context, in *Solicitud, opts ...grpc.CallOption) (*Oferta, error)
	AceptarOferta(ctx context.Context, in *Decision, opts ...grpc.CallOption) (*Respuesta, error)
	EstudiarGolpe(ctx context.Context, in *Riesgo, opts ...grpc.CallOption) (*Empty, error)
}

type heistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHeistServiceClient(cc grpc.ClientConnInterface) HeistServiceClient {
	return &heistServiceClient{cc}
}

func (c *heistServiceClient) SolicitarOferta(ctx context.Context, in *Solicitud, opts ...grpc.CallOption) (*Oferta, error) {
	out := new(Oferta)
	err := c.cc.Invoke(ctx, HeistService_SolicitarOferta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heistServiceClient) AceptarOferta(ctx context.Context, in *Decision, opts ...grpc.CallOption) (*Respuesta, error) {
	out := new(Respuesta)
	err := c.cc.Invoke(ctx, HeistService_AceptarOferta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heistServiceClient) EstudiarGolpe(ctx context.Context, in *Riesgo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, HeistService_EstudiarGolpe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HeistServiceServer is the server API for HeistService service.
// All implementations must embed UnimplementedHeistServiceServer
// for forward compatibility
type HeistServiceServer interface {
	SolicitarOferta(context.Context, *Solicitud) (*Oferta, error)
	AceptarOferta(context.Context, *Decision) (*Respuesta, error)
	EstudiarGolpe(context.Context, *Riesgo) (*Empty, error)
	mustEmbedUnimplementedHeistServiceServer()
}

// UnimplementedHeistServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHeistServiceServer struct {
}

func (UnimplementedHeistServiceServer) SolicitarOferta(context.Context, *Solicitud) (*Oferta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolicitarOferta not implemented")
}
func (UnimplementedHeistServiceServer) AceptarOferta(context.Context, *Decision) (*Respuesta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AceptarOferta not implemented")
}
func (UnimplementedHeistServiceServer) EstudiarGolpe(context.Context, *Riesgo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstudiarGolpe not implemented")
}
func (UnimplementedHeistServiceServer) mustEmbedUnimplementedHeistServiceServer() {}

// UnsafeHeistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HeistServiceServer will
// result in compilation errors.
type UnsafeHeistServiceServer interface {
	mustEmbedUnimplementedHeistServiceServer()
}

func RegisterHeistServiceServer(s grpc.ServiceRegistrar, srv HeistServiceServer) {
	s.RegisterService(&HeistService_ServiceDesc, srv)
}

func _HeistService_SolicitarOferta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solicitud)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeistServiceServer).SolicitarOferta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HeistService_SolicitarOferta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeistServiceServer).SolicitarOferta(ctx, req.(*Solicitud))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeistService_AceptarOferta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Decision)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeistServiceServer).AceptarOferta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HeistService_AceptarOferta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeistServiceServer).AceptarOferta(ctx, req.(*Decision))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeistService_EstudiarGolpe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Riesgo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeistServiceServer).EstudiarGolpe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HeistService_EstudiarGolpe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeistServiceServer).EstudiarGolpe(ctx, req.(*Riesgo))
	}
	return interceptor(ctx, in, info, handler)
}

// HeistService_ServiceDesc is the grpc.ServiceDesc for HeistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HeistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "heist.HeistService",
	HandlerType: (*HeistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SolicitarOferta",
			Handler:    _HeistService_SolicitarOferta_Handler,
		},
		{
			MethodName: "AceptarOferta",
			Handler:    _HeistService_AceptarOferta_Handler,
		},
		{
			MethodName: "EstudiarGolpe",
			Handler:    _HeistService_EstudiarGolpe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "heist.proto",
}
